name: Frontend CI/CD Pipeline

# Déclenchement du pipeline
on:
  push:
    branches: [ main ]
    paths: 
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'frontend/**'

# Variables d'environnement
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: xks-todo-frontend
  NODE_VERSION: '18'

jobs:
  # ===== JOB 1: BUILD ET TEST REACT =====
  build-and-test:
    name: ⚛️ Build & Test React
    runs-on: ubuntu-latest
    
    steps:
    # Checkout du code
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    # Configuration Node.js
    - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    # Installation des dépendances
    - name: 📦 Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    # Linting et tests
    - name: 🔍 Run linter
      working-directory: ./frontend
      run: npm run lint --if-present
    
    - name: 🧪 Run tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false
    
    # Build de production
    - name: 🏗️ Build production
      working-directory: ./frontend
      run: npm run build
    
    # Upload des assets buildés
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: react-build
        path: frontend/build/
        retention-days: 1

  # ===== JOB 2: BUILD DOCKER IMAGE =====
  dockerize:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    # Checkout du code
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    # Configuration Docker Buildx
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # Login au GitHub Container Registry
    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    # Extraction des métadonnées
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    # Build et push de l'image Docker
    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # ===== JOB 3: DEPLOY (SIMULÉ) =====
  deploy:
    name: 🚀 Deploy (Simulation)
    runs-on: ubuntu-latest
    needs: [build-and-test, dockerize]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🎯 Simulate deployment
      run: |
        echo "🚀 === DÉPLOIEMENT FRONTEND SIMULÉ ==="
        echo "📦 Image Docker frontend construite !"
        echo "🌐 Image disponible sur : ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest"
        echo "📍 Prêt pour déploiement sur :"
        echo "   - Netlify"
        echo "   - Vercel" 
        echo "   - AWS S3 + CloudFront"
        echo "   - GitHub Pages"
        echo "✅ Pipeline frontend terminé !"